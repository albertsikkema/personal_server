services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    # Don't expose port directly - use reverse proxy
    expose:
      - "8000"
    environment:
      - PYTHONPATH=/app
      - ENV=production
      - DEBUG=false
    env_file:
      - .env.prod
    # Production command (inherited from Dockerfile)
    restart: always
    # Resource limits for production
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    # Health check (inherited from Dockerfile but with production settings)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Logging configuration for production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Uncomment for SSL/TLS
      # - ./ssl:/etc/ssl/certs:ro
    depends_on:
      fastapi:
        condition: service_healthy
    restart: always
    # Resource limits for nginx
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    # Nginx health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  # Optional: Persistent log storage
  app_logs:
    driver: local

networks:
  default:
    driver: bridge