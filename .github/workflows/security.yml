name: Security

# This workflow performs comprehensive security scanning to prevent deployment of vulnerable code.
# It blocks builds when security vulnerabilities are detected, ensuring only secure code reaches production.
# 
# Security Tools:
# - pip-audit: Scans Python dependencies for known vulnerabilities (CVE database)
# - bandit: Analyzes source code for security anti-patterns and risky functions
# 
# What it scans:
# - All Python packages and their versions for known CVEs
# - Source code for security issues (eval, exec, hardcoded secrets, etc.)
# - Configuration files and security-sensitive code patterns
# 
# When it runs:
# - On pushes to main and dev branches  
# - On pull requests to main and dev branches
# - Weekly scheduled scans every Monday
# - Only when relevant files change (smart path filtering)
# 
# Security status:
# - ✅ PASS: No vulnerabilities detected, safe to deploy
# - ❌ FAIL: Security vulnerabilities found, deployment BLOCKED
# 
# Artifacts: Security reports uploaded for detailed analysis when issues found

on:
  push:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'requirements*.txt'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'requirements*.txt'
      - '.github/workflows/security.yml'
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  changes:
    name: Detect Security Changes
    runs-on: ubuntu-latest
    outputs:
      security: ${{ steps.changes.outputs.security }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            security:
              - '**.py'
              - 'pyproject.toml'
              - 'uv.lock'
              - 'requirements*.txt'
              - '.github/workflows/security.yml'

  pip-audit:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.security == 'true' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6.3.1
        with:
          version: "0.7.20"
          enable-cache: true
      
      - name: Set up Python
        run: uv python install 3.13
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-pip-audit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-pip-audit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-pip-audit-${{ runner.os }}
      
      - name: Install dependencies
        run: uv sync
      
      - name: Install pip-audit
        run: uv add --dev pip-audit
      
      - name: Run pip-audit
        run: |
          echo "Running pip-audit vulnerability scan..."
          echo "Current directory: $(pwd)"
          echo "Python version: $(uv run python --version)"
          echo "pip-audit version: $(uv run pip-audit --version 2>&1 || echo 'pip-audit not found')"
          echo "Starting scan..."
          
          # Run pip-audit and capture exit code
          if uv run pip-audit --format=json --output=vulnerability-report.json; then
            echo "pip-audit scan completed successfully - no vulnerabilities found"
            exit_code=0
          else
            exit_code=$?
            echo "pip-audit scan failed with exit code $exit_code"
            
            # Check if JSON report was created despite exit code 1 (vulnerabilities found)
            if [ -f vulnerability-report.json ]; then
              echo "JSON report was created - vulnerabilities were found"
              # Don't overwrite the report, pip-audit created it successfully
            else
              echo "No JSON report created - creating fallback report..."
              echo "{\"vulnerabilities\": [], \"scan_failed\": true, \"error\": \"pip-audit execution failed with exit code $exit_code\"}" > vulnerability-report.json
            fi
          fi
          
          echo "Checking if report file exists:"
          ls -la vulnerability-report.json || echo "vulnerability-report.json not found"
          
          if [ -f vulnerability-report.json ]; then
            echo "Report file contents:"
            cat vulnerability-report.json | head -20  # Show first 20 lines to avoid too much output
          fi
          
          # For pip-audit, exit code 1 with vulnerabilities found should still fail the build
          exit $exit_code
      
      - name: Generate pip-audit summary
        if: always()
        run: |
          echo "## 🔍 Dependency Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "vulnerability-report.json" ]; then
            # Check if scan failed
            scan_failed=$(cat vulnerability-report.json | jq -r '.scan_failed // false' 2>/dev/null)
            
            if [ "$scan_failed" = "true" ]; then
              echo "❌ **Dependencies**: pip-audit scan failed to execute" >> $GITHUB_STEP_SUMMARY
              echo "   - Check workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
              echo "   - This may indicate dependency resolution or installation issues" >> $GITHUB_STEP_SUMMARY
            else
              # Count vulnerabilities in pip-audit format (dependencies with vulns arrays)
              vulnerability_count=$(cat vulnerability-report.json | jq '[.dependencies[] | select(.vulns | length > 0) | .vulns[]] | length' 2>/dev/null || echo "0")
              vulnerable_packages=$(cat vulnerability-report.json | jq -r '[.dependencies[] | select(.vulns | length > 0) | .name] | unique | length' 2>/dev/null || echo "0")
              
              if [ "$vulnerability_count" = "0" ]; then
                echo "✅ **Dependencies**: No known vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
                echo "   - All Python packages are secure" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **Dependencies**: $vulnerability_count vulnerabilities found in $vulnerable_packages package(s)" >> $GITHUB_STEP_SUMMARY
                echo "   - Update affected packages to secure versions" >> $GITHUB_STEP_SUMMARY
                
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### Critical Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
                cat vulnerability-report.json | jq -r '.dependencies[] | select(.vulns | length > 0) | "**\(.name) \(.version):** \(.vulns | length) vulnerabilities", (.vulns[] | "- \(.id) (\(.aliases[]?)): \(.description | .[0:100])...")' 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "- See full report in artifacts" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "⚠️ **Dependencies**: Could not generate vulnerability report" >> $GITHUB_STEP_SUMMARY
            echo "   - pip-audit command may have failed completely" >> $GITHUB_STEP_SUMMARY
            echo "   - Check workflow logs for error details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        id: upload-vuln-report
        with:
          name: vulnerability-report
          path: vulnerability-report.json
          retention-days: 30
      
      - name: Update summary with artifact link
        if: always()
        run: |
          # Try to get artifact ID and update summary
          sleep 5  # Wait for artifact to be processed
          artifact_id=$(gh api repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts --jq '.artifacts[] | select(.name == "vulnerability-report") | .id' 2>/dev/null || echo "")
          
          if [ ! -z "$artifact_id" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Direct Download**: [vulnerability-report.json](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts/$artifact_id)" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  bandit:
    name: Code Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.security == 'true' || github.event_name == 'schedule' }}
    permissions:
      # Required for uploading results to GitHub Security tab
      security-events: write
      # Required for actions in private repositories
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Bandit Security Analysis
        uses: PyCQA/bandit-action@v1
        with:
          targets: "main.py models/ routers/ services/ mcp_integration/ dependencies.py config.py middleware.py utils/"
          severity: medium  # Only fail on medium and high severity issues
          confidence: medium  # Only report medium and high confidence issues
        
      - name: Generate security summary
        if: always()
        run: |
          echo "## 🛡️ Source Code Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Official Bandit Analysis**: Completed using PyCQA bandit-action" >> $GITHUB_STEP_SUMMARY
          echo "   - **Severity Filter**: Medium and High issues only" >> $GITHUB_STEP_SUMMARY
          echo "   - **Confidence Filter**: Medium and High confidence only" >> $GITHUB_STEP_SUMMARY
          echo "   - **GitHub Security Integration**: Results available in Security tab" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Security Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "- **PyCQA Bandit Action**: Official source code security analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **pip-audit**: Python package vulnerability scanning" >> $GITHUB_STEP_SUMMARY