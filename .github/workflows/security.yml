name: Security

# This workflow performs comprehensive security scanning to prevent deployment of vulnerable code.
# It blocks builds when security vulnerabilities are detected, ensuring only secure code reaches production.
# 
# Security Tools:
# - pip-audit: Scans Python dependencies for known vulnerabilities (CVE database)
# - bandit: Analyzes source code for security anti-patterns and risky functions
# 
# What it scans:
# - All Python packages and their versions for known CVEs
# - Source code for security issues (eval, exec, hardcoded secrets, etc.)
# - Configuration files and security-sensitive code patterns
# 
# When it runs:
# - On pushes to main and dev branches  
# - On pull requests to main and dev branches
# - Weekly scheduled scans every Monday
# - Only when relevant files change (smart path filtering)
# 
# Security status:
# - ✅ PASS: No vulnerabilities detected, safe to deploy
# - ❌ FAIL: Security vulnerabilities found, deployment BLOCKED
# 
# Artifacts: Security reports uploaded for detailed analysis when issues found

on:
  push:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'requirements*.txt'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'uv.lock'
      - 'requirements*.txt'
      - '.github/workflows/security.yml'
  schedule:
    - cron: '0 0 * * 1'  # Weekly on Monday
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  changes:
    name: Detect Security Changes
    runs-on: ubuntu-latest
    outputs:
      security: ${{ steps.changes.outputs.security }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            security:
              - '**.py'
              - 'pyproject.toml'
              - 'uv.lock'
              - 'requirements*.txt'
              - '.github/workflows/security.yml'

  pip-audit:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.security == 'true' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6.3.1
        with:
          version: "0.7.20"
          enable-cache: true
      
      - name: Set up Python
        run: uv python install 3.13
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-pip-audit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-pip-audit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-pip-audit-${{ runner.os }}
      
      - name: Install dependencies
        run: uv sync
      
      - name: Install pip-audit
        run: uv add --dev pip-audit
      
      - name: Run pip-audit
        run: uv run pip-audit --format=json --output=vulnerability-report.json
      
      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: vulnerability-report.json
          retention-days: 30
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  bandit:
    name: Code Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.security == 'true' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6.3.1
        with:
          version: "0.7.20"
          enable-cache: true
      
      - name: Set up Python
        run: uv python install 3.13
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-bandit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-bandit-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-bandit-${{ runner.os }}
      
      - name: Install dependencies
        run: uv sync
      
      - name: Install bandit
        run: uv add --dev bandit
      
      - name: Run bandit
        run: uv run bandit -r main.py models/ routers/ services/ mcp_integration/ dependencies.py config.py middleware.py utils/ -f json -o bandit-report.json
      
      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          retention-days: 30
      
      - name: Minimize uv cache
        run: uv cache prune --ci