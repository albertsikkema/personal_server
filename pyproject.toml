[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "personal-server"
version = "1.0.0"
description = "A FastAPI application with API key authentication"
authors = [{name = "FastAPI App", email = "app@example.com"}]
requires-python = ">=3.10"
dependencies = [
    "fastapi[standard]",
    "pydantic>=2.0",
    "pydantic-settings",
    "uvicorn",
    "slowapi",
    "httpx",
    "fastmcp",
    # SECURITY FAULT: Intentionally vulnerable package for testing pip-audit
    "werkzeug==0.15.6",  # Known CVE-2019-14806: Werkzeug directory traversal vulnerability
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff",
    "coverage",
    "bandit>=1.8.6",
    "pip-audit>=2.9.0",
]

[tool.setuptools]
py-modules = []
packages = ["models", "routers", "services", "utils", "mcp_integration"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # pycodestyle errors
    "E7",
    "E9",
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",  # Line too long, handled by formatter
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
case-sensitive = true
force-single-line = false
force-sort-within-sections = false
known-first-party = ["fastapi", "pydantic"]
split-on-trailing-comma = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = [
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "TID252",  # Relative imports from parent modules are banned
]

# Allow print statements in scripts
"scripts/**/*" = ["T201"]
